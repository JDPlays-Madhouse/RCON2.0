name: Build Rust Binary

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_VERSION: stable

jobs:
  test:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Cache APT Packages
        uses: awalsh128/cache-apt-pkgs-action@v1.4.2
        with:
          packages: libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - uses: actions/cache@v4
        id: npm-cache
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: install frontend dependencies
        # if: ${{ steps.npm-cache.outputs.cache-hit != 'true' }}
        run: npm install

      - name: install Rust Stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ""

      - name: npm lint
        run: npm run lint

      # - name: Rust cache
      #   uses: swatinem/rust-cache@v2
      #   with:
      #     workspaces: "./src-tauri -> target"

      - name: Run tests
        run: cargo test --verbose
        working-directory: ./src-tauri

  build-and-upload:
    needs: test
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "ubuntu-22.04"
            args: ""
          - platform: "windows-latest"
            args: ""
          - platform: "macos-latest" # for Arm based macs (M1 and above).
            args: "--target aarch64-apple-darwin"
          - platform: "macos-latest" # for Intel based macs.
            args: "--target x86_64-apple-darwin"

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust Stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      # - name: Rust cache
      #   uses: swatinem/rust-cache@v2
      #   with:
      #     workspaces: "./src-tauri -> target"

      - name: Cache APT Packages
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: install frontend dependencies
        run: npm install # change this to npm, pnpm or bun depending on which one you use.

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: __VERSION__
          releaseName: "v__VERSION__"
          releaseBody: "Download the version for your OS."
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}
